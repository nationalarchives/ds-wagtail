name: Tests

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      poetry-version:
        required: true
        type: string

jobs:
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - run: pip install flake8 isort black
      - name: Check compliance with isort
        run: isort -c .
      - name: Check compliance with Black
        run: black -t py38 -t py39 -t py310 -t py311 -t py312 --line-length 88 --verbose etna config
      - name: Check compliance with flake8
        run: flake8 .

  test-python:
    name: Test Python
    runs-on: ubuntu-latest
    needs: lint-python
    env:
      DJANGO_SETTINGS_MODULE: config.settings.test
      DATABASE_ENGINE: django.db.backends.postgresql
      DATABASE_NAME: postgres
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
    services:
      postgres:
        image: postgres:16.0
        env:
          POSTGRES_USER: ${{ env.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 1s --health-timeout 3s --health-retries 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
      - id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ds-wagtail-venv-${{ runner.os }}-${{ inputs.poetry-version }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev
      - name: Run Django checks
        run: poetry run python manage.py check
      - name: Run test suite
        run: poetry run coverage run manage.py test etna
      - name: Check for missing migrations
        run: poetry run python manage.py makemigrations --check --noinput

  compile-javascript:
    name: Compile JavaScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Install npm modules
        run: npm install
      - name: Compile JavaScript
        run: npm run compile:js

  test-javascript:
    name: Test JavaScript
    runs-on: ubuntu-latest
    needs: compile-javascript
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Install npm modules
        run: npm install
      - name: Run jest tests
        run: npm test

  compile-scss:
    name: Compile SCSS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Install npm modules
        run: npm install
      - name: Compile SCSS
        run: npm run compile:css
