name: Build and deploy

on:
  workflow_dispatch:
  push:

concurrency:
  group: cd-${{ github.ref }}

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: snok/install-poetry@v1
      - name: Check Poetry dependencies
        run: poetry show -o

  check-migrations:
    name: Check Migrations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        uses: ./.github/actions/check-migrations

  test-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        uses: ./.github/actions/python-tests
        with:
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get tag
        id: version-tag
        uses: nationalarchives/ds-docker-actions/.github/actions/get-version-tag@main
    outputs:
      version: ${{ steps.version-tag.outputs.version-tag }}

  build:
    runs-on: ubuntu-latest
    needs:
      - test-python
      - check-migrations
      - check-dependencies
      - version
    permissions:
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        uses: nationalarchives/ds-docker-actions/.github/actions/docker-build@main
        with:
          version: ${{ needs.version.outputs.version }}
          latest: ${{ github.ref == 'refs/heads/main' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          docker-image-name: ${{ vars.DOCKER_IMAGE_NAME }}
          wiz-client-id: ${{ secrets.WIZ_CLIENT_ID }}
          wiz-client-secret: ${{ secrets.WIZ_CLIENT_SECRET }}
          wiz-project-id: ${{ secrets.WIZ_PROJECT_DIGITALSERVICES }}
      - name: Create tag
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ needs.version.outputs.version }}',
              sha: context.sha
            })

  update-ds-infrastructure-web:
    runs-on: ubuntu-latest
    needs:
      - build
      - version
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: nationalarchives/ds-infrastructure-web
          ref: main
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
      - name: Set up git config
        run: |
          git config user.name "ds-wagtail"
          git config user.email "<>"
      - name: Install jq
        run: sudo apt-get install jq
      - name: Update config
        run: jq --indent 4 '(.services.cms.version|="${{ needs.version.outputs.version }}")' config/develop.json > tmp.$$.json && mv tmp.$$.json config/develop.json
      - name: Push new version
        run: |
          git add config/develop.json
          git commit -m "Update cms to v${{ needs.version.outputs.version }}"
          git push origin main

  update-dblclk:
    runs-on: ubuntu-latest
    needs:
      - build
      - version
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: nationalarchives/ds-etna
          ref: proof-of-concept
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
      - name: Set up git config
        run: |
          git config user.name "ds-wagtail"
          git config user.email "<>"
      - name: Install yq
        uses: dcarbone/install-yq-action@v1.1.1
      - name: Update config
        run: yq '(.services.cms.image|="ghcr.io/${{ github.repository_owner }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ needs.version.outputs.version }}")' docker-compose.yml > tmp.$$.yml && mv tmp.$$.yml docker-compose.yml
      - name: Push new version
        run: |
          git add docker-compose.yml
          git commit -m "Update cms to v${{ needs.version.outputs.version }}"
          git push origin proof-of-concept
