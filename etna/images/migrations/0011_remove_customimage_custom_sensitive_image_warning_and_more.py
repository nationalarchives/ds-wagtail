# Generated by Django 5.2 on 2025-05-21 11:08
# etna:allowAlterField
# etna:allowRemoveField

from django.db import migrations, models
from etna.collections.models import Highlight
from etna.articles.models import PageGalleryImage
from wagtail.models import Page
from etna.images.models import CustomImage
from etna.articles.models import ArticlePage, FocusedArticlePage
from etna.blog.models import BlogPostPage
from etna.whatson.models import ExhibitionPage

def migrate_image_data_to_highlight(apps, schema_editor):
    Highlight = apps.get_model("collections", "Highlight")

    for obj in Highlight.objects.all():
        if img := obj.image:
            obj.record = img.record
            obj.record_dates = img.record_dates
            obj.description = img.description
            obj.title = img.title
            obj.save()

def set_image_description(image_id, alt_text):
    if image_id and alt_text:
        try:
            image = CustomImage.objects.get(id=image_id)
            image.description = alt_text
            image.save()
        except CustomImage.DoesNotExist:
            pass

def handle_block(block):
    if block["type"] == "image":
        set_image_description(
            block["value"].get("image"),
            block["value"].get("alt_text"),
        )
    elif block["type"] == "image_gallery" or block["type"] == "exhibition_highlights":
        for img in block["value"].get("images", []):
            set_image_description(
                img["value"].get("image"),
                img["value"].get("alt_text"),
            )
    elif block["type"] == "promoted_item":
        image = block["value"].get("image")
        if image and image.get("image") and image.get("alt_text") and not image.get("decorative"):
            set_image_description(
                image.get("image"),
                image.get("alt_text"),
            )
    elif block["type"] == "content_section":
        for sub_block in block["value"].get("content", []):
            handle_block(sub_block)

def migrate_alt_text_to_custom_image(apps, schema_editor):
    for obj in PageGalleryImage.objects.all():
        if obj.image and obj.alt_text:
            set_image_description(obj.image.id, obj.alt_text)

    for obj in Highlight.objects.all():
        if obj.image and obj.alt_text:
            set_image_description(obj.image.id, obj.alt_text)

    for page in Page.objects.type(ArticlePage, FocusedArticlePage, BlogPostPage):
        if body := getattr(page.specific, "body", None):
            for block in getattr(body, "_raw_data", []):
                handle_block(block)
    
    for page in Page.objects.type(ExhibitionPage):
        if body := getattr(page.specific, "exhibition_highlights", None):
            for block in getattr(body, "_raw_data", []):
                handle_block(block)
                

class Migration(migrations.Migration):

    dependencies = [
        ('images', '0010_alter_customimage_copyright'),
        ('collections', '0063_highlight_description_highlight_record_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_image_data_to_highlight, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name='customimage',
            name='custom_sensitive_image_warning',
        ),
        migrations.RemoveField(
            model_name='customimage',
            name='is_sensitive',
        ),
        migrations.RemoveField(
            model_name='customimage',
            name='record',
        ),
        migrations.RemoveField(
            model_name='customimage',
            name='record_dates',
        ),
        migrations.AlterField(
            model_name='customimage',
            name='description',
            field=models.CharField(blank=True, default='', max_length=255, verbose_name='description'),
        ),
        migrations.RunPython(migrate_alt_text_to_custom_image, migrations.RunPython.noop),
    ]
