# Generated by Django 5.2 on 2025-05-01 16:05

import django.db.models.deletion
import etna.analytics.mixins
import modelcluster.fields
import wagtail.fields
import wagtail_headless_preview.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('alerts', '0001_initial'),
        ('images', '0001_initial'),
        ('wagtailcore', '0094_alter_page_locale'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalAuthorTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=100)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_author_tags', to='wagtailcore.page')),
            ],
        ),
        migrations.CreateModel(
            name='PeopleIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('twitter_og_title', models.CharField(blank=True, help_text='If left blank, the OpenGraph title will be used.', max_length=255, null=True, verbose_name='Twitter OpenGraph title')),
                ('twitter_og_description', models.TextField(blank=True, help_text='If left blank, the OpenGraph description will be used.', null=True, verbose_name='Twitter OpenGraph description')),
                ('short_title', models.CharField(blank=True, help_text='A shorter title for use in breadcrumbs and other navigational elements, where applicable.', max_length=30, null=True, verbose_name='short title')),
                ('teaser_text', models.TextField(help_text='A short, enticing description of this page. This will appear in promos and under thumbnails around the site.', max_length=160, verbose_name='teaser text')),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='alerts.alert')),
                ('search_image', models.ForeignKey(blank=True, help_text='Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='OpenGraph image')),
                ('teaser_image', models.ForeignKey(blank=True, help_text='Image that will appear on thumbnails and promos around the site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('twitter_og_image', models.ForeignKey(blank=True, help_text='If left blank, the OpenGraph image will be used.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Twitter OpenGraph image')),
            ],
            options={
                'abstract': False,
            },
            bases=(etna.analytics.mixins.DataLayerMixin, wagtail_headless_preview.models.HeadlessPreviewMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='PersonPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('twitter_og_title', models.CharField(blank=True, help_text='If left blank, the OpenGraph title will be used.', max_length=255, null=True, verbose_name='Twitter OpenGraph title')),
                ('twitter_og_description', models.TextField(blank=True, help_text='If left blank, the OpenGraph description will be used.', null=True, verbose_name='Twitter OpenGraph description')),
                ('short_title', models.CharField(blank=True, help_text='A shorter title for use in breadcrumbs and other navigational elements, where applicable.', max_length=30, null=True, verbose_name='short title')),
                ('teaser_text', models.TextField(help_text='A short, enticing description of this page. This will appear in promos and under thumbnails around the site.', max_length=160, verbose_name='teaser text')),
                ('role', models.CharField(max_length=100)),
                ('summary', wagtail.fields.RichTextField()),
                ('research_summary', wagtail.fields.StreamField([('contact', 8), ('inset_text', 10), ('paragraph', 10), ('content_section', 13)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {}), 1: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['link'], 'required': False}), 2: ('wagtail.blocks.TextBlock', (), {'features': ['bold', 'italic', 'link'], 'required': False}), 3: ('wagtail.blocks.CharBlock', (), {'required': False}), 4: ('wagtail.blocks.URLBlock', (), {'required': False}), 5: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'required': False}), 6: ('wagtail.blocks.EmailBlock', (), {'required': False}), 7: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'required': False}), 8: ('wagtail.blocks.StructBlock', [[('title', 0), ('body', 1), ('address', 2), ('telephone', 3), ('chat_link', 4), ('chat_note', 5), ('email', 6), ('website_link', 4), ('social_media', 7)]], {}), 9: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ol', 'ul']}), 10: ('wagtail.blocks.StructBlock', [[('text', 9)]], {}), 11: ('wagtail.blocks.CharBlock', (), {'label': 'Heading', 'max_length': 100}), 12: ('wagtail.blocks.StreamBlock', [[('contact', 8), ('inset_text', 10), ('paragraph', 10)]], {'required': False}), 13: ('wagtail.blocks.StructBlock', [[('heading', 11), ('content', 12)]], {})}, null=True)),
                ('archived_blog_url', models.URLField(blank=True, help_text="Link to the author's blog on the web archive", null=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='alerts.alert')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('search_image', models.ForeignKey(blank=True, help_text='Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='OpenGraph image')),
                ('teaser_image', models.ForeignKey(blank=True, help_text='Image that will appear on thumbnails and promos around the site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('twitter_og_image', models.ForeignKey(blank=True, help_text='If left blank, the OpenGraph image will be used.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Twitter OpenGraph image')),
            ],
            options={
                'verbose_name': 'Person page',
                'verbose_name_plural': 'People pages',
            },
            bases=(etna.analytics.mixins.DataLayerMixin, wagtail_headless_preview.models.HeadlessPreviewMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='AuthorTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_tags', to='wagtailcore.page')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='people_pages', to='people.personpage', verbose_name='author')),
            ],
        ),
        migrations.CreateModel(
            name='ShopItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('url', models.URLField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_items', to='people.personpage')),
            ],
            options={
                'verbose_name': 'Shop item',
                'verbose_name_plural': 'Shop items',
            },
        ),
    ]
