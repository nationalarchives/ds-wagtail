# Generated by Django 5.2 on 2025-05-01 16:05

import django.core.validators
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
import wagtail_headless_preview.models
from django.db import migrations, models

import etna.analytics.mixins
import etna.collections.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("alerts", "0001_initial"),
        ("articles", "0002_initial"),
        ("images", "0001_initial"),
        ("wagtailcore", "0094_alter_page_locale"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccessType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "slug",
                    models.SlugField(
                        max_length=255, unique=True, verbose_name="slug"
                    ),
                ),
            ],
            options={
                "verbose_name": "Access type",
                "verbose_name_plural": "Access types",
            },
        ),
        migrations.CreateModel(
            name="AudienceType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "slug",
                    models.SlugField(
                        max_length=255, unique=True, verbose_name="slug"
                    ),
                ),
            ],
            options={
                "verbose_name": "Audience type",
                "verbose_name_plural": "Audience types",
            },
        ),
        migrations.CreateModel(
            name="EventType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "slug",
                    models.SlugField(
                        max_length=255, unique=True, verbose_name="slug"
                    ),
                ),
            ],
            options={
                "verbose_name": "event type",
                "verbose_name_plural": "event types",
            },
        ),
        migrations.CreateModel(
            name="EventAccessType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "access_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_access_types",
                        to="whatson.accesstype",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_access_types",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EventAudienceType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "audience_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_audience_types",
                        to="whatson.audiencetype",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_audience_types",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EventHost",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="description"
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hosts",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EventSession",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_id",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=35,
                        null=True,
                        verbose_name="session ID",
                    ),
                ),
                ("start", models.DateTimeField(verbose_name="starts at")),
                ("end", models.DateTimeField(verbose_name="ends at")),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "session",
                "verbose_name_plural": "sessions",
                "ordering": ["start"],
            },
        ),
        migrations.CreateModel(
            name="EventSpeaker",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="description"
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="speakers",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EventPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "twitter_og_title",
                    models.CharField(
                        blank=True,
                        help_text="If left blank, the OpenGraph title will be used.",
                        max_length=255,
                        null=True,
                        verbose_name="Twitter OpenGraph title",
                    ),
                ),
                (
                    "twitter_og_description",
                    models.TextField(
                        blank=True,
                        help_text="If left blank, the OpenGraph description will be used.",
                        null=True,
                        verbose_name="Twitter OpenGraph description",
                    ),
                ),
                (
                    "short_title",
                    models.CharField(
                        blank=True,
                        help_text="A shorter title for use in breadcrumbs and other navigational elements, where applicable.",
                        max_length=30,
                        null=True,
                        verbose_name="short title",
                    ),
                ),
                (
                    "teaser_text",
                    models.TextField(
                        help_text="A short, enticing description of this page. This will appear in promos and under thumbnails around the site.",
                        max_length=160,
                        verbose_name="teaser text",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        help_text="1-2 sentences introducing the subject of the page, and explaining why a user should read on.",
                        max_length=300,
                        verbose_name="introductory text",
                    ),
                ),
                (
                    "article_tag_names",
                    models.TextField(editable=False, null=True),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="start date"
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="end date"
                    ),
                ),
                (
                    "description",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="A description of the event.",
                        verbose_name="description",
                    ),
                ),
                (
                    "useful_info",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Useful information about the event.",
                        verbose_name="need to know",
                    ),
                ),
                (
                    "need_to_know_button_text",
                    models.CharField(
                        blank=True,
                        help_text="The text of the need to know button.",
                        max_length=30,
                        verbose_name="need to know button text",
                    ),
                ),
                (
                    "need_to_know_button_link",
                    models.URLField(
                        blank=True,
                        help_text="The website for need to know info.",
                        max_length=255,
                        verbose_name="need to know link",
                    ),
                ),
                (
                    "target_audience",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Info about the target audience for the event.",
                        verbose_name="who it's for",
                    ),
                ),
                (
                    "venue_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("online", "Online"),
                            ("in_person", "In person"),
                            ("hybrid", "In person and online"),
                        ],
                        default="in_person",
                        max_length=30,
                        verbose_name="venue type",
                    ),
                ),
                (
                    "venue_website",
                    models.URLField(
                        blank=True,
                        help_text="The website for the venue.",
                        max_length=255,
                        verbose_name="venue website",
                    ),
                ),
                (
                    "venue_address",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="The address of the venue.",
                        verbose_name="venue address",
                    ),
                ),
                (
                    "venue_space_name",
                    models.CharField(
                        blank=True,
                        help_text="The name of the venue space.",
                        max_length=255,
                        verbose_name="venue space name",
                    ),
                ),
                (
                    "venue_directions",
                    models.URLField(
                        blank=True,
                        help_text="A link to the venue's 'How to find us' page.",
                        max_length=255,
                        null=True,
                        verbose_name="venue directions",
                    ),
                ),
                (
                    "video_conference_info",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Useful information about the video conference.",
                        verbose_name="video conference info",
                    ),
                ),
                (
                    "registration_url",
                    models.URLField(
                        editable=False,
                        max_length=255,
                        verbose_name="registration url",
                    ),
                ),
                (
                    "min_price",
                    models.IntegerField(
                        default=0, editable=False, verbose_name="minimum price"
                    ),
                ),
                (
                    "max_price",
                    models.IntegerField(
                        default=0, editable=False, verbose_name="maximum price"
                    ),
                ),
                (
                    "eventbrite_id",
                    models.CharField(
                        editable=False,
                        max_length=255,
                        null=True,
                        verbose_name="eventbrite ID",
                    ),
                ),
                (
                    "registration_info",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Additional information about how to register for the event.",
                        verbose_name="registration info",
                    ),
                ),
                (
                    "contact_info",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Information about who to contact regarding the event.",
                        verbose_name="contact info",
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="alerts.alert",
                    ),
                ),
                (
                    "lead_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="OpenGraph image",
                    ),
                ),
                (
                    "tags",
                    modelcluster.contrib.taggit.ClusterTaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="articles.TaggedArticle",
                        to="articles.ArticleTag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "teaser_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear on thumbnails and promos around the site.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "twitter_og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="If left blank, the OpenGraph image will be used.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="Twitter OpenGraph image",
                    ),
                ),
                (
                    "event_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="whatson.eventtype",
                    ),
                ),
            ],
            options={
                "verbose_name": "event page",
            },
            bases=(
                etna.collections.models.TopicalPageMixin,
                etna.analytics.mixins.DataLayerMixin,
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ExhibitionPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_image_caption",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="An optional caption for hero images. This could be used for image sources or for other useful metadata.",
                        verbose_name="hero image caption (optional)",
                    ),
                ),
                (
                    "accent_colour",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("black", "Black"),
                            ("pink", "Pink"),
                            ("orange", "Orange"),
                            ("yellow", "Yellow"),
                            ("green", "Green"),
                            ("blue", "Blue"),
                        ],
                        default="none",
                        help_text="The accent colour of the page where relevant.",
                        max_length=20,
                        verbose_name="page accent colour",
                    ),
                ),
                (
                    "hero_layout",
                    models.CharField(
                        choices=[
                            ("default", "Default"),
                            ("shift", "Shifted"),
                            ("split", "Split"),
                        ],
                        default="default",
                        help_text="The layout of the hero component.",
                        max_length=20,
                        verbose_name="hero layout",
                    ),
                ),
                (
                    "hero_style",
                    models.CharField(
                        choices=[
                            ("none", "None"),
                            ("contrast", "Contrast"),
                            ("tint", "Tint"),
                            ("accent", "Accent"),
                        ],
                        default="none",
                        help_text="The accent colour of the hero component.",
                        max_length=20,
                        verbose_name="hero component colour",
                    ),
                ),
                (
                    "twitter_og_title",
                    models.CharField(
                        blank=True,
                        help_text="If left blank, the OpenGraph title will be used.",
                        max_length=255,
                        null=True,
                        verbose_name="Twitter OpenGraph title",
                    ),
                ),
                (
                    "twitter_og_description",
                    models.TextField(
                        blank=True,
                        help_text="If left blank, the OpenGraph description will be used.",
                        null=True,
                        verbose_name="Twitter OpenGraph description",
                    ),
                ),
                (
                    "short_title",
                    models.CharField(
                        blank=True,
                        help_text="A shorter title for use in breadcrumbs and other navigational elements, where applicable.",
                        max_length=30,
                        null=True,
                        verbose_name="short title",
                    ),
                ),
                (
                    "teaser_text",
                    models.TextField(
                        help_text="A short, enticing description of this page. This will appear in promos and under thumbnails around the site.",
                        max_length=160,
                        verbose_name="teaser text",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        help_text="1-2 sentences introducing the subject of the page, and explaining why a user should read on.",
                        max_length=300,
                        verbose_name="introductory text",
                    ),
                ),
                (
                    "article_tag_names",
                    models.TextField(editable=False, null=True),
                ),
                (
                    "subtitle",
                    models.CharField(
                        help_text="A subtitle for the event.",
                        max_length=120,
                        verbose_name="subtitle",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="start date"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="end date"
                    ),
                ),
                (
                    "exclude_days",
                    models.BooleanField(
                        default=False,
                        help_text="Check this box to show only the month and year on the exhibition.",
                        verbose_name="exclude days",
                    ),
                ),
                ("price", models.FloatField(default=0, verbose_name="price")),
                (
                    "booking_details",
                    wagtail.fields.RichTextField(
                        help_text="Information about how to book tickets for the exhibition.",
                        max_length=40,
                        null=True,
                        verbose_name="booking details",
                    ),
                ),
                (
                    "open_days",
                    models.CharField(
                        blank=True,
                        help_text="The days the exhibition is open, e.g. Tuesday to Sunday.",
                        max_length=255,
                        verbose_name="open days",
                    ),
                ),
                (
                    "audience_heading",
                    models.CharField(
                        blank=True,
                        help_text="The heading for the audience detail section.",
                        max_length=40,
                        verbose_name="audience heading",
                    ),
                ),
                (
                    "audience_detail",
                    models.CharField(
                        blank=True,
                        help_text="The text for the audience detail section.",
                        max_length=40,
                        verbose_name="audience detail",
                    ),
                ),
                (
                    "location_space_name",
                    models.CharField(
                        help_text="The location of the exhibition within the venue.",
                        max_length=40,
                        null=True,
                        verbose_name="location space name",
                    ),
                ),
                (
                    "location_address",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Leave blank to default to TNA address.",
                        null=True,
                        verbose_name="location address",
                    ),
                ),
                (
                    "intro_title",
                    models.CharField(
                        blank=True,
                        help_text="Only used in jump links. Does not appear on page. Leave blank to default to 'About [Page title]'.",
                        max_length=100,
                        verbose_name="intro title",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [("paragraph", 1), ("quote", 4)],
                        blank=True,
                        block_lookup={
                            0: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": [
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                    ]
                                },
                            ),
                            1: (
                                "wagtail.blocks.StructBlock",
                                [[("text", 0)]],
                                {},
                            ),
                            2: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": [
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                    ],
                                    "required": True,
                                },
                            ),
                            3: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"max_length": 100, "required": False},
                            ),
                            4: (
                                "wagtail.blocks.StructBlock",
                                [[("quote", 2), ("attribution", 3)]],
                                {},
                            ),
                        },
                        null=True,
                    ),
                ),
                (
                    "exhibition_highlights_title",
                    models.CharField(
                        blank=True,
                        help_text="Leave blank to default to 'Exhibition highlights'.",
                        max_length=100,
                        verbose_name="exhibition highlights title",
                    ),
                ),
                (
                    "exhibition_highlights",
                    wagtail.fields.StreamField(
                        [("exhibition_highlights", 7)],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"required": False},
                            ),
                            1: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": ["bold", "italic", "link"],
                                    "required": False,
                                },
                            ),
                            2: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {
                                    "rendition_size": "max-900x900",
                                    "required": True,
                                },
                            ),
                            3: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": 'Alternative (alt) text describes images when they fail to load, and is read aloud by assistive technologies. Use a maximum of 100 characters to describe your image. <a href="https://html.spec.whatwg.org/multipage/images.html#alt" target="_blank">Check the guidance for tips on writing alt text</a>.',
                                    "label": "Alternative text",
                                    "max_length": 100,
                                },
                            ),
                            4: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": ["bold", "italic", "link"],
                                    "help_text": "If provided, displays directly below the image. Can be used to specify sources, transcripts or other useful metadata.",
                                    "label": "Caption (optional)",
                                    "required": False,
                                },
                            ),
                            5: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("image", 2),
                                        ("alt_text", 3),
                                        ("caption", 4),
                                    ]
                                ],
                                {},
                            ),
                            6: ("wagtail.blocks.ListBlock", (5,), {}),
                            7: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 0),
                                        ("description", 1),
                                        ("images", 6),
                                    ]
                                ],
                                {},
                            ),
                        },
                    ),
                ),
                (
                    "review",
                    wagtail.fields.StreamField(
                        [("review", 3)],
                        blank=True,
                        block_lookup={
                            0: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": ["bold", "italic", "link"],
                                    "required": True,
                                },
                            ),
                            1: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"max_length": 100, "required": True},
                            ),
                            2: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        (0, "No stars"),
                                        (3, "3 stars"),
                                        (4, "4 stars"),
                                        (5, "5 stars"),
                                    ],
                                    "icon": "pick",
                                },
                            ),
                            3: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("quote", 0),
                                        ("attribution", 1),
                                        ("stars", 2),
                                    ]
                                ],
                                {},
                            ),
                        },
                    ),
                ),
                (
                    "video_title",
                    models.CharField(
                        blank=True,
                        help_text="The title of the video section.",
                        max_length=100,
                        verbose_name="video title",
                    ),
                ),
                (
                    "video",
                    wagtail.fields.StreamField(
                        [("youtube", 5), ("media", 9)],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "label": "Title",
                                    "max_length": 100,
                                    "required": True,
                                },
                            ),
                            1: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "label": "YouTube Video ID",
                                    "max_length": 11,
                                    "required": True,
                                    "validators": [
                                        django.core.validators.RegexValidator(
                                            message="Invalid YouTube Video ID",
                                            regex="^[a-zA-Z0-9_-]{11}$",
                                        )
                                    ],
                                },
                            ),
                            2: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {
                                    "label": "Preview Image",
                                    "rendition_size": "fill-640x360",
                                    "required": True,
                                },
                            ),
                            3: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {"label": "Transcript", "required": False},
                            ),
                            4: (
                                "wagtail.blocks.BooleanBlock",
                                (),
                                {
                                    "help_text": "Tick if the video has captions on YouTube",
                                    "label": "Captions available",
                                    "required": False,
                                },
                            ),
                            5: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 0),
                                        ("video_id", 1),
                                        ("preview_image", 2),
                                        ("transcript", 3),
                                        ("captions_available", 4),
                                    ]
                                ],
                                {},
                            ),
                            6: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "A descriptive title for the media block",
                                    "required": True,
                                },
                            ),
                            7: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {
                                    "help_text": "A thumbnail image for the media block",
                                    "rendition_size": "fill-960x540",
                                    "required": False,
                                },
                            ),
                            8: ("etna.media.blocks.MediaChooserBlock", (), {}),
                            9: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 6),
                                        ("thumbnail", 7),
                                        ("media", 8),
                                    ]
                                ],
                                {},
                            ),
                        },
                    ),
                ),
                (
                    "related_pages_title",
                    models.CharField(
                        blank=True,
                        help_text="The title to display for the related content section.",
                        max_length=255,
                    ),
                ),
                (
                    "related_pages_description",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="The description to display for the related content section.",
                    ),
                ),
                (
                    "related_pages",
                    wagtail.fields.StreamField(
                        [("featured_page", 2), ("featured_external_link", 7)],
                        blank=True,
                        block_lookup={
                            0: (
                                "etna.core.blocks.page_chooser.APIPageChooserBlock",
                                (),
                                {
                                    "label": "Page",
                                    "page_type": ["wagtailcore.Page"],
                                    "required": True,
                                },
                            ),
                            1: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Optional override for the teaser text",
                                    "label": "Teaser text override",
                                    "required": False,
                                },
                            ),
                            2: (
                                "wagtail.blocks.StructBlock",
                                [[("page", 0), ("teaser_text", 1)]],
                                {},
                            ),
                            3: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Title", "max_length": 100},
                            ),
                            4: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Description"},
                            ),
                            5: (
                                "wagtail.blocks.URLBlock",
                                (),
                                {"label": "URL"},
                            ),
                            6: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {"label": "Image", "required": False},
                            ),
                            7: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 3),
                                        ("description", 4),
                                        ("url", 5),
                                        ("image", 6),
                                    ]
                                ],
                                {},
                            ),
                        },
                        null=True,
                    ),
                ),
                (
                    "event_title",
                    models.CharField(
                        blank=True,
                        default="Exhibition events",
                        help_text="The title of the events section.",
                        max_length=100,
                        null=True,
                        verbose_name="event title",
                    ),
                ),
                (
                    "event_description",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="The description to display for the events section.",
                    ),
                ),
                (
                    "event_links",
                    wagtail.fields.StreamField(
                        [("event_links", 5)],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Title", "max_length": 100},
                            ),
                            1: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Description"},
                            ),
                            2: (
                                "wagtail.blocks.URLBlock",
                                (),
                                {"label": "URL"},
                            ),
                            3: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {"label": "Image", "required": False},
                            ),
                            4: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 0),
                                        ("description", 1),
                                        ("url", 2),
                                        ("image", 3),
                                    ]
                                ],
                                {},
                            ),
                            5: (
                                "wagtail.blocks.ListBlock",
                                (4,),
                                {"max_num": 2},
                            ),
                        },
                        null=True,
                    ),
                ),
                (
                    "shop",
                    wagtail.fields.StreamField(
                        [("shop", 5)],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Title", "max_length": 100},
                            ),
                            1: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"label": "Description", "max_length": 255},
                            ),
                            2: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "default": "Shop now",
                                    "label": "CTA text",
                                    "max_length": 50,
                                },
                            ),
                            3: (
                                "wagtail.blocks.URLBlock",
                                (),
                                {
                                    "help_text": "The URL to the shop collection",
                                    "label": "URL",
                                },
                            ),
                            4: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {"label": "Background image"},
                            ),
                            5: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("title", 0),
                                        ("description", 1),
                                        ("cta_text", 2),
                                        ("url", 3),
                                        ("background_image", 4),
                                    ]
                                ],
                                {},
                            ),
                        },
                    ),
                ),
                (
                    "plan_your_visit_title",
                    models.CharField(
                        blank=True,
                        help_text="Leave blank to default to 'Plan your visit'.",
                        max_length=100,
                    ),
                ),
                (
                    "plan_your_visit_image",
                    wagtail.fields.StreamField(
                        [("image", 3)],
                        blank=True,
                        block_lookup={
                            0: (
                                "etna.core.blocks.image.APIImageChooserBlock",
                                (),
                                {
                                    "rendition_size": "max-900x900",
                                    "required": True,
                                },
                            ),
                            1: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": 'Alternative (alt) text describes images when they fail to load, and is read aloud by assistive technologies. Use a maximum of 100 characters to describe your image. <a href="https://html.spec.whatwg.org/multipage/images.html#alt" target="_blank">Check the guidance for tips on writing alt text</a>.',
                                    "label": "Alternative text",
                                    "max_length": 100,
                                },
                            ),
                            2: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": ["bold", "italic", "link"],
                                    "help_text": "If provided, displays directly below the image. Can be used to specify sources, transcripts or other useful metadata.",
                                    "label": "Caption (optional)",
                                    "required": False,
                                },
                            ),
                            3: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("image", 0),
                                        ("alt_text", 1),
                                        ("caption", 2),
                                    ]
                                ],
                                {},
                            ),
                        },
                        null=True,
                    ),
                ),
                (
                    "plan_your_visit",
                    wagtail.fields.StreamField(
                        [("plan_your_visit", 3)],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"required": True},
                            ),
                            1: (
                                "etna.core.blocks.paragraph.APIRichTextBlock",
                                (),
                                {
                                    "features": [
                                        "bold",
                                        "italic",
                                        "link",
                                        "ol",
                                        "ul",
                                    ],
                                    "required": True,
                                },
                            ),
                            2: (
                                "wagtail.blocks.StructBlock",
                                [[("title", 0), ("body", 1)]],
                                {},
                            ),
                            3: ("wagtail.blocks.ListBlock", (2,), {}),
                        },
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="alerts.alert",
                    ),
                ),
                (
                    "featured_page",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="OpenGraph image",
                    ),
                ),
                (
                    "tags",
                    modelcluster.contrib.taggit.ClusterTaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="articles.TaggedArticle",
                        to="articles.ArticleTag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "teaser_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear on thumbnails and promos around the site.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "twitter_og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="If left blank, the OpenGraph image will be used.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="Twitter OpenGraph image",
                    ),
                ),
            ],
            options={
                "verbose_name": "exhibition page",
                "verbose_name_plural": "exhibition pages",
            },
            bases=(
                etna.collections.models.TopicalPageMixin,
                etna.analytics.mixins.DataLayerMixin,
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="WhatsOnPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "twitter_og_title",
                    models.CharField(
                        blank=True,
                        help_text="If left blank, the OpenGraph title will be used.",
                        max_length=255,
                        null=True,
                        verbose_name="Twitter OpenGraph title",
                    ),
                ),
                (
                    "twitter_og_description",
                    models.TextField(
                        blank=True,
                        help_text="If left blank, the OpenGraph description will be used.",
                        null=True,
                        verbose_name="Twitter OpenGraph description",
                    ),
                ),
                (
                    "short_title",
                    models.CharField(
                        blank=True,
                        help_text="A shorter title for use in breadcrumbs and other navigational elements, where applicable.",
                        max_length=30,
                        null=True,
                        verbose_name="short title",
                    ),
                ),
                (
                    "teaser_text",
                    models.TextField(
                        help_text="A short, enticing description of this page. This will appear in promos and under thumbnails around the site.",
                        max_length=160,
                        verbose_name="teaser text",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        help_text="1-2 sentences introducing the subject of the page, and explaining why a user should read on.",
                        max_length=300,
                        verbose_name="introductory text",
                    ),
                ),
                (
                    "promoted_links",
                    wagtail.fields.StreamField(
                        [("promoted_links", 2)],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"required": False},
                            ),
                            1: (
                                "etna.core.blocks.page_list.PageListBlock",
                                (),
                                {"max_num": 3, "min_num": 1},
                            ),
                            2: (
                                "wagtail.blocks.StructBlock",
                                [[("heading", 0), ("promoted_links", 1)]],
                                {},
                            ),
                        },
                    ),
                ),
                (
                    "large_card_links",
                    wagtail.fields.StreamField(
                        [("large_card_links", 3)],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"max_length": 100, "required": False},
                            ),
                            1: (
                                "etna.core.blocks.page_chooser.APIPageChooserBlock",
                                (),
                                {
                                    "label": "Link one target",
                                    "required_api_fields": ["teaser_image"],
                                },
                            ),
                            2: (
                                "etna.core.blocks.page_chooser.APIPageChooserBlock",
                                (),
                                {
                                    "label": "Link two target",
                                    "required_api_fields": ["teaser_image"],
                                },
                            ),
                            3: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("heading", 0),
                                        ("page_1", 1),
                                        ("page_2", 2),
                                    ]
                                ],
                                {},
                            ),
                        },
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="alerts.alert",
                    ),
                ),
                (
                    "featured_event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="whatson.eventpage",
                        verbose_name="featured event",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="OpenGraph image",
                    ),
                ),
                (
                    "teaser_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image that will appear on thumbnails and promos around the site.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
                (
                    "twitter_og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="If left blank, the OpenGraph image will be used.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                        verbose_name="Twitter OpenGraph image",
                    ),
                ),
            ],
            options={
                "verbose_name": "What's On page",
            },
            bases=(
                etna.analytics.mixins.DataLayerMixin,
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
    ]
