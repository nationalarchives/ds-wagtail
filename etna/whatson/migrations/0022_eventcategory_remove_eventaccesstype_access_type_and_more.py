# Generated by Django 5.2.1 on 2025-06-17 12:35
# etna:allowRemoveField
# etna:allowDeleteModel
# etna:allowAlterField

import django.db.models.deletion
import etna.analytics.mixins
import modelcluster.fields
import wagtail.fields
import wagtail_headless_preview.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('alerts', '0003_alert_name_alter_alert_title'),
        ('core', '0008_location'),
        ('images', '0011_remove_customimage_custom_sensitive_image_warning_and_more'),
        ('people', '0017_personpage_archived_blog'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('whatson', '0021_alter_exhibitionpage_video'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'event category',
                'verbose_name_plural': 'event categories',
            },
        ),
        migrations.RemoveField(
            model_name='eventaccesstype',
            name='access_type',
        ),
        migrations.RemoveField(
            model_name='eventaudiencetype',
            name='audience_type',
        ),
        migrations.RemoveField(
            model_name='eventaccesstype',
            name='page',
        ),
        migrations.RemoveField(
            model_name='eventaudiencetype',
            name='page',
        ),
        migrations.RemoveField(
            model_name='eventhost',
            name='image',
        ),
        migrations.RemoveField(
            model_name='eventhost',
            name='page',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='event_type',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='article_tag_names',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='contact_info',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='eventbrite_id',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='lead_image',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='need_to_know_button_link',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='need_to_know_button_text',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='registration_info',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='registration_url',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='tags',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='target_audience',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='useful_info',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='venue_address',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='venue_directions',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='venue_space_name',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='venue_type',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='venue_website',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='video_conference_info',
        ),
        migrations.RemoveField(
            model_name='eventsession',
            name='session_id',
        ),
        migrations.RemoveField(
            model_name='eventspeaker',
            name='description',
        ),
        migrations.RemoveField(
            model_name='whatsonpage',
            name='featured_event',
        ),
        migrations.RemoveField(
            model_name='whatsonpage',
            name='large_card_links',
        ),
        migrations.RemoveField(
            model_name='whatsonpage',
            name='promoted_links',
        ),
        migrations.AddField(
            model_name='eventpage',
            name='audience_detail',
            field=models.CharField(blank=True, help_text='The text for the audience detail section.', max_length=40, verbose_name='audience detail'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='audience_heading',
            field=models.CharField(blank=True, help_text='The heading for the audience detail section.', max_length=40, verbose_name='audience heading'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='booking_details',
            field=wagtail.fields.RichTextField(blank=True, help_text='Information about how to book tickets for the event.', max_length=40, null=True, verbose_name='booking details'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='booking_link',
            field=models.URLField(blank=True, help_text='Link to booking page', null=True, verbose_name='Booking link'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='custom_warning_text',
            field=wagtail.fields.RichTextField(blank=True, help_text='If specified, will be used for the content warning.', verbose_name='custom content warning text (optional)'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='event_highlights',
            field=wagtail.fields.StreamField([('event_highlights', 7)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'required': False}), 1: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'required': False}), 2: ('etna.core.blocks.image.APIImageChooserBlock', (), {'rendition_size': 'max-900x900', 'required': True}), 3: ('wagtail.blocks.CharBlock', (), {'help_text': 'Alternative (alt) text describes images when they fail to load, and is read aloud by assistive technologies. Use a maximum of 100 characters to describe your image. <a href="https://html.spec.whatwg.org/multipage/images.html#alt" target="_blank">Check the guidance for tips on writing alt text</a>.', 'label': 'Alternative text', 'max_length': 100}), 4: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'help_text': 'If provided, displays directly below the image. Can be used to specify sources, transcripts or other useful metadata.', 'label': 'Caption (optional)', 'required': False}), 5: ('wagtail.blocks.StructBlock', [[('image', 2), ('alt_text', 3), ('caption', 4)]], {}), 6: ('wagtail.blocks.ListBlock', (5,), {}), 7: ('wagtail.blocks.StructBlock', [[('title', 0), ('description', 1), ('images', 6)]], {})}),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='event_highlights_title',
            field=models.CharField(blank=True, help_text="Leave blank to default to 'Event highlights'.", max_length=100, verbose_name='event highlights title'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='hero_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='hero_image_caption',
            field=wagtail.fields.RichTextField(blank=True, help_text='An optional caption for hero images. This could be used for image sources or for other useful metadata.', verbose_name='hero image caption (optional)'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='location',
            field=models.ForeignKey(help_text='The location of the event.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.location', verbose_name='location'),
        ),
        migrations.AddField(
            model_name='eventsession',
            name='sold_out',
            field=models.BooleanField(default=False, help_text='Check this box if the session is sold out.', verbose_name='sold out'),
        ),
        migrations.AddField(
            model_name='eventspeaker',
            name='biography',
            field=wagtail.fields.RichTextField(blank=True, help_text='A short biography of the speaker.', verbose_name='biography'),
        ),
        migrations.AddField(
            model_name='eventspeaker',
            name='person_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='people.personpage'),
        ),
        migrations.AddField(
            model_name='eventspeaker',
            name='role',
            field=models.CharField(blank=True, help_text='The role of the speaker.', max_length=200, verbose_name='role'),
        ),
        migrations.AddField(
            model_name='exhibitionpage',
            name='custom_warning_text',
            field=wagtail.fields.RichTextField(blank=True, help_text='If specified, will be used for the content warning.', verbose_name='custom content warning text (optional)'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='max_price',
            field=models.FloatField(default=0, verbose_name='maximum price'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='min_price',
            field=models.FloatField(default=0, verbose_name='minimum price'),
        ),
        migrations.AlterField(
            model_name='eventspeaker',
            name='name',
            field=models.CharField(blank=True, help_text='The name of the speaker.', max_length=100, verbose_name='name'),
        ),
        migrations.CreateModel(
            name='DisplayPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('custom_warning_text', wagtail.fields.RichTextField(blank=True, help_text='If specified, will be used for the content warning.', verbose_name='custom content warning text (optional)')),
                ('hero_image_caption', wagtail.fields.RichTextField(blank=True, help_text='An optional caption for hero images. This could be used for image sources or for other useful metadata.', verbose_name='hero image caption (optional)')),
                ('twitter_og_title', models.CharField(blank=True, help_text='If left blank, the OpenGraph title will be used.', max_length=255, null=True, verbose_name='Twitter OpenGraph title')),
                ('twitter_og_description', models.TextField(blank=True, help_text='If left blank, the OpenGraph description will be used.', null=True, verbose_name='Twitter OpenGraph description')),
                ('short_title', models.CharField(blank=True, help_text='A shorter title for use in breadcrumbs and other navigational elements, where applicable.', max_length=30, null=True, verbose_name='short title')),
                ('teaser_text', models.TextField(help_text='A short, enticing description of this page. This will appear in promos and under thumbnails around the site.', max_length=160, verbose_name='teaser text')),
                ('intro', wagtail.fields.RichTextField(help_text='1-2 sentences introducing the subject of the page, and explaining why a user should read on.', max_length=300, verbose_name='introductory text')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('exclude_days', models.BooleanField(default=False, help_text='Check this box to show only the month and year on the display.', verbose_name='exclude days')),
                ('price', models.FloatField(default=0, verbose_name='price')),
                ('booking_details', wagtail.fields.RichTextField(help_text='Information about how to book tickets for the display.', max_length=40, null=True, verbose_name='booking details')),
                ('open_days', models.CharField(blank=True, help_text='The days the display is open, e.g. Tuesday to Sunday.', max_length=255, verbose_name='open days')),
                ('audience_heading', models.CharField(blank=True, help_text='The heading for the audience detail section.', max_length=40, verbose_name='audience heading')),
                ('audience_detail', models.CharField(blank=True, help_text='The text for the audience detail section.', max_length=40, verbose_name='audience detail')),
                ('body', wagtail.fields.StreamField([('paragraph', 1), ('quote', 4)], blank=True, block_lookup={0: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ol', 'ul']}), 1: ('wagtail.blocks.StructBlock', [[('text', 0)]], {}), 2: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ol', 'ul'], 'required': True}), 3: ('wagtail.blocks.CharBlock', (), {'max_length': 100, 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('quote', 2), ('attribution', 3)]], {})}, null=True)),
                ('display_highlights_title', models.CharField(blank=True, help_text="Leave blank to default to 'Display highlights'.", max_length=100, verbose_name='display highlights title')),
                ('display_highlights', wagtail.fields.StreamField([('display_highlights', 7)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'required': False}), 1: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'required': False}), 2: ('etna.core.blocks.image.APIImageChooserBlock', (), {'rendition_size': 'max-900x900', 'required': True}), 3: ('wagtail.blocks.CharBlock', (), {'help_text': 'Alternative (alt) text describes images when they fail to load, and is read aloud by assistive technologies. Use a maximum of 100 characters to describe your image. <a href="https://html.spec.whatwg.org/multipage/images.html#alt" target="_blank">Check the guidance for tips on writing alt text</a>.', 'label': 'Alternative text', 'max_length': 100}), 4: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'help_text': 'If provided, displays directly below the image. Can be used to specify sources, transcripts or other useful metadata.', 'label': 'Caption (optional)', 'required': False}), 5: ('wagtail.blocks.StructBlock', [[('image', 2), ('alt_text', 3), ('caption', 4)]], {}), 6: ('wagtail.blocks.ListBlock', (5,), {}), 7: ('wagtail.blocks.StructBlock', [[('title', 0), ('description', 1), ('images', 6)]], {})})),
                ('related_pages_title', models.CharField(blank=True, help_text='The title to display for the related content section.', max_length=255)),
                ('related_pages_description', wagtail.fields.RichTextField(blank=True, help_text='The description to display for the related content section.')),
                ('related_pages', wagtail.fields.StreamField([('featured_page', 2), ('featured_external_link', 7)], blank=True, block_lookup={0: ('etna.core.blocks.page_chooser.APIPageChooserBlock', (), {'label': 'Page', 'page_type': ['wagtailcore.Page'], 'required': True}), 1: ('wagtail.blocks.CharBlock', (), {'help_text': 'Optional override for the teaser text', 'label': 'Teaser text override', 'required': False}), 2: ('wagtail.blocks.StructBlock', [[('page', 0), ('teaser_text', 1)]], {}), 3: ('wagtail.blocks.CharBlock', (), {'label': 'Title', 'max_length': 100}), 4: ('wagtail.blocks.CharBlock', (), {'label': 'Description'}), 5: ('wagtail.blocks.URLBlock', (), {'label': 'URL'}), 6: ('etna.core.blocks.image.APIImageChooserBlock', (), {'label': 'Image', 'required': False}), 7: ('wagtail.blocks.StructBlock', [[('title', 3), ('description', 4), ('url', 5), ('image', 6)]], {})}, null=True)),
                ('shop', wagtail.fields.StreamField([('shop', 5)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'label': 'Title', 'max_length': 100}), 1: ('wagtail.blocks.CharBlock', (), {'label': 'Description', 'max_length': 255}), 2: ('wagtail.blocks.CharBlock', (), {'default': 'Shop now', 'label': 'CTA text', 'max_length': 50}), 3: ('wagtail.blocks.URLBlock', (), {'help_text': 'The URL to the shop collection', 'label': 'URL'}), 4: ('etna.core.blocks.image.APIImageChooserBlock', (), {'label': 'Background image'}), 5: ('wagtail.blocks.StructBlock', [[('title', 0), ('description', 1), ('cta_text', 2), ('url', 3), ('background_image', 4)]], {})})),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='alerts.alert')),
                ('featured_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('hero_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('location', models.ForeignKey(help_text='The location of the display.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.location', verbose_name='location')),
                ('search_image', models.ForeignKey(blank=True, help_text='Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='OpenGraph image')),
                ('teaser_image', models.ForeignKey(blank=True, help_text='Image that will appear on thumbnails and promos around the site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('twitter_og_image', models.ForeignKey(blank=True, help_text='If left blank, the OpenGraph image will be used.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Twitter OpenGraph image')),
            ],
            options={
                'verbose_name': 'display page',
                'verbose_name_plural': 'display pages',
            },
            bases=(etna.analytics.mixins.DataLayerMixin, wagtail_headless_preview.models.HeadlessPreviewMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='CategorySelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_pages', to='wagtailcore.page')),
                ('category', models.ForeignKey(help_text='The category of events to display on the Category page.', on_delete=django.db.models.deletion.CASCADE, related_name='selected_category', to='whatson.eventcategory', verbose_name='category')),
            ],
        ),
        migrations.AddField(
            model_name='eventpage',
            name='event_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='whatson.eventcategory'),
        ),
        migrations.CreateModel(
            name='EventsListingPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('twitter_og_title', models.CharField(blank=True, help_text='If left blank, the OpenGraph title will be used.', max_length=255, null=True, verbose_name='Twitter OpenGraph title')),
                ('twitter_og_description', models.TextField(blank=True, help_text='If left blank, the OpenGraph description will be used.', null=True, verbose_name='Twitter OpenGraph description')),
                ('short_title', models.CharField(blank=True, help_text='A shorter title for use in breadcrumbs and other navigational elements, where applicable.', max_length=30, null=True, verbose_name='short title')),
                ('teaser_text', models.TextField(help_text='A short, enticing description of this page. This will appear in promos and under thumbnails around the site.', max_length=160, verbose_name='teaser text')),
                ('intro', wagtail.fields.RichTextField(help_text='1-2 sentences introducing the subject of the page, and explaining why a user should read on.', max_length=300, verbose_name='introductory text')),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='alerts.alert')),
                ('search_image', models.ForeignKey(blank=True, help_text='Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='OpenGraph image')),
                ('teaser_image', models.ForeignKey(blank=True, help_text='Image that will appear on thumbnails and promos around the site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('twitter_og_image', models.ForeignKey(blank=True, help_text='If left blank, the OpenGraph image will be used.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Twitter OpenGraph image')),
            ],
            options={
                'abstract': False,
            },
            bases=(etna.analytics.mixins.DataLayerMixin, wagtail_headless_preview.models.HeadlessPreviewMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ExhibitionsListingPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('twitter_og_title', models.CharField(blank=True, help_text='If left blank, the OpenGraph title will be used.', max_length=255, null=True, verbose_name='Twitter OpenGraph title')),
                ('twitter_og_description', models.TextField(blank=True, help_text='If left blank, the OpenGraph description will be used.', null=True, verbose_name='Twitter OpenGraph description')),
                ('short_title', models.CharField(blank=True, help_text='A shorter title for use in breadcrumbs and other navigational elements, where applicable.', max_length=30, null=True, verbose_name='short title')),
                ('teaser_text', models.TextField(help_text='A short, enticing description of this page. This will appear in promos and under thumbnails around the site.', max_length=160, verbose_name='teaser text')),
                ('intro', wagtail.fields.RichTextField(help_text='1-2 sentences introducing the subject of the page, and explaining why a user should read on.', max_length=300, verbose_name='introductory text')),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='alerts.alert')),
                ('search_image', models.ForeignKey(blank=True, help_text='Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='OpenGraph image')),
                ('teaser_image', models.ForeignKey(blank=True, help_text='Image that will appear on thumbnails and promos around the site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('twitter_og_image', models.ForeignKey(blank=True, help_text='If left blank, the OpenGraph image will be used.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Twitter OpenGraph image')),
            ],
            options={
                'abstract': False,
            },
            bases=(etna.analytics.mixins.DataLayerMixin, wagtail_headless_preview.models.HeadlessPreviewMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='WhatsOnCategoryPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('twitter_og_title', models.CharField(blank=True, help_text='If left blank, the OpenGraph title will be used.', max_length=255, null=True, verbose_name='Twitter OpenGraph title')),
                ('twitter_og_description', models.TextField(blank=True, help_text='If left blank, the OpenGraph description will be used.', null=True, verbose_name='Twitter OpenGraph description')),
                ('short_title', models.CharField(blank=True, help_text='A shorter title for use in breadcrumbs and other navigational elements, where applicable.', max_length=30, null=True, verbose_name='short title')),
                ('teaser_text', models.TextField(help_text='A short, enticing description of this page. This will appear in promos and under thumbnails around the site.', max_length=160, verbose_name='teaser text')),
                ('intro', wagtail.fields.RichTextField(help_text='1-2 sentences introducing the subject of the page, and explaining why a user should read on.', max_length=300, verbose_name='introductory text')),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='alerts.alert')),
                ('featured_page', models.ForeignKey(blank=True, help_text='The page to feature on the category page.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='featured page')),
                ('search_image', models.ForeignKey(blank=True, help_text='Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='OpenGraph image')),
                ('teaser_image', models.ForeignKey(blank=True, help_text='Image that will appear on thumbnails and promos around the site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('twitter_og_image', models.ForeignKey(blank=True, help_text='If left blank, the OpenGraph image will be used.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Twitter OpenGraph image')),
            ],
            options={
                'verbose_name': "What's On category page",
            },
            bases=(etna.analytics.mixins.DataLayerMixin, wagtail_headless_preview.models.HeadlessPreviewMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='WhatsOnSeriesPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('twitter_og_title', models.CharField(blank=True, help_text='If left blank, the OpenGraph title will be used.', max_length=255, null=True, verbose_name='Twitter OpenGraph title')),
                ('twitter_og_description', models.TextField(blank=True, help_text='If left blank, the OpenGraph description will be used.', null=True, verbose_name='Twitter OpenGraph description')),
                ('short_title', models.CharField(blank=True, help_text='A shorter title for use in breadcrumbs and other navigational elements, where applicable.', max_length=30, null=True, verbose_name='short title')),
                ('teaser_text', models.TextField(help_text='A short, enticing description of this page. This will appear in promos and under thumbnails around the site.', max_length=160, verbose_name='teaser text')),
                ('intro', wagtail.fields.RichTextField(help_text='1-2 sentences introducing the subject of the page, and explaining why a user should read on.', max_length=300, verbose_name='introductory text')),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='alerts.alert')),
                ('featured_page', models.ForeignKey(blank=True, help_text='The page to feature on the series page.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='featured page')),
                ('search_image', models.ForeignKey(blank=True, help_text='Image that will appear when this page is shared on social media. This will default to the teaser image if left blank.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='OpenGraph image')),
                ('teaser_image', models.ForeignKey(blank=True, help_text='Image that will appear on thumbnails and promos around the site.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('twitter_og_image', models.ForeignKey(blank=True, help_text='If left blank, the OpenGraph image will be used.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Twitter OpenGraph image')),
            ],
            options={
                'verbose_name': "What's On series page",
            },
            bases=(etna.analytics.mixins.DataLayerMixin, wagtail_headless_preview.models.HeadlessPreviewMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='SeriesTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_series_tags', to='wagtailcore.page')),
                ('series', models.ForeignKey(help_text='The series to include the page in.', on_delete=django.db.models.deletion.CASCADE, related_name='series_pages', to='whatson.whatsonseriespage', verbose_name='series')),
            ],
            options={
                'verbose_name': 'series',
                'verbose_name_plural': 'series',
            },
        ),
        migrations.DeleteModel(
            name='AccessType',
        ),
        migrations.DeleteModel(
            name='AudienceType',
        ),
        migrations.DeleteModel(
            name='EventAccessType',
        ),
        migrations.DeleteModel(
            name='EventAudienceType',
        ),
        migrations.DeleteModel(
            name='EventHost',
        ),
        migrations.DeleteModel(
            name='EventType',
        ),
    ]
