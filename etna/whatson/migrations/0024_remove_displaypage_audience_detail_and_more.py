# Generated by Django 5.2 on 2025-07-09 15:51

import django.db.models.deletion
import wagtail.fields
from django.db import migrations, models


def clear_description_field(apps, schema_editor):
    """
    Clear the description field of EventPage model to ensure it is set to the new StreamField format.
    """
    EventPage = apps.get_model('whatson', 'EventPage')
    EventPage.objects.all().update(description="{}")


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0094_alter_page_locale'),
        ('whatson', '0023_rename_eventcategory_eventtype_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='displaypage',
            name='audience_detail',
        ),
        migrations.RemoveField(
            model_name='displaypage',
            name='audience_heading',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='audience_detail',
        ),
        migrations.RemoveField(
            model_name='eventpage',
            name='audience_heading',
        ),
        migrations.RemoveField(
            model_name='exhibitionpage',
            name='audience_detail',
        ),
        migrations.RemoveField(
            model_name='exhibitionpage',
            name='audience_heading',
        ),
        migrations.RemoveField(
            model_name='whatsonpageselection',
            name='featured_page',
        ),
        migrations.AddField(
            model_name='displaypage',
            name='age_detail',
            field=models.CharField(blank=True, help_text='The text for the age detail section.', max_length=40, verbose_name='age detail'),
        ),
        migrations.AddField(
            model_name='displaypage',
            name='all_year',
            field=models.BooleanField(default=False, help_text='Check this box if the display is available all year round.', verbose_name='all year'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='age_detail',
            field=models.CharField(blank=True, help_text='The text for the age detail section.', max_length=40, verbose_name='age detail'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='various_dates',
            field=models.BooleanField(default=False, help_text='Check this box if the event has multiple sessions with different dates and times.', verbose_name='various dates and times'),
        ),
        migrations.AddField(
            model_name='eventslistingpage',
            name='featured_page',
            field=models.ForeignKey(blank=True, help_text='The page to feature at the top of the Events page.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='whatson.eventpage', verbose_name='featured page'),
        ),
        migrations.AddField(
            model_name='exhibitionpage',
            name='age_detail',
            field=models.CharField(blank=True, help_text='The text for the age detail section.', max_length=40, verbose_name='age detail'),
        ),
        migrations.AddField(
            model_name='exhibitionslistingpage',
            name='featured_page',
            field=models.ForeignKey(blank=True, help_text='The page to feature at the top of the Exhibitions page.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='featured page'),
        ),
        migrations.RunPython(clear_description_field, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='eventpage',
            name='description',
            field=wagtail.fields.StreamField([('contact', 8), ('inset_text', 10), ('paragraph', 10), ('content_section', 13)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {}), 1: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['link'], 'required': False}), 2: ('wagtail.blocks.TextBlock', (), {'features': ['bold', 'italic', 'link'], 'required': False}), 3: ('wagtail.blocks.CharBlock', (), {'required': False}), 4: ('wagtail.blocks.URLBlock', (), {'required': False}), 5: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'required': False}), 6: ('wagtail.blocks.EmailBlock', (), {'required': False}), 7: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'required': False}), 8: ('wagtail.blocks.StructBlock', [[('title', 0), ('body', 1), ('address', 2), ('telephone', 3), ('chat_link', 4), ('chat_note', 5), ('email', 6), ('website_link', 4), ('social_media', 7)]], {}), 9: ('etna.core.blocks.paragraph.APIRichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ol', 'ul']}), 10: ('wagtail.blocks.StructBlock', [[('text', 9)]], {}), 11: ('wagtail.blocks.CharBlock', (), {'label': 'Heading', 'max_length': 100}), 12: ('wagtail.blocks.StreamBlock', [[('contact', 8), ('inset_text', 10), ('paragraph', 10)]], {'required': False}), 13: ('wagtail.blocks.StructBlock', [[('heading', 11), ('content', 12)]], {})}, help_text='The description of the event.', null=True, verbose_name='description'),
        ),
    ]
