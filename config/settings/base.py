"""
Django settings for etna project.

Generated by 'django-admin startproject' using Django 3.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os

from .util import strtobool

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

WAGTAILADMIN_BASE_URL = os.getenv("WAGTAILADMIN_BASE_URL", "")
WAGTAILAPI_IMAGES_BASE_URL = os.getenv("WAGTAILAPI_IMAGES_BASE_URL", "")
WAGTAILAPI_MEDIA_BASE_URL = os.getenv("WAGTAILAPI_MEDIA_BASE_URL", "")
WAGTAILAPI_BASE_URL = os.getenv("WAGTAILAPI_BASE_URL", WAGTAILADMIN_BASE_URL)
WAGTAIL_HEADLESS_PREVIEW = {
    "CLIENT_URLS": {
        "default": os.getenv("WAGTAIL_HEADLESS_PREVIEW_URL", "{SITE_ROOT_URL}"),
    },
    "SERVE_BASE_URL": None,
}

DEBUG = strtobool(os.getenv("DEBUG", "False"))

SECRET_KEY = os.getenv("SECRET_KEY", "")

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    "app.generic_pages",
    "app.alerts",
    "app.articles",
    "app.blog",
    "app.people",
    "app.cookies",
    "app.categories",
    "app.ciim",
    "app.collections",
    "app.core",
    "app.highlights",
    "app.home",
    "app.images",
    "app.media",
    "app.users",
    "app.whatson",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.table_block",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "wagtailfontawesomesvg",
    "wagtailmedia",
    "wagtail.contrib.settings",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.humanize",
    "django.contrib.messages",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    "allauth",
    "allauth.account",
    "birdbath",
    "wagtail.api.v2",
    "wagtail.contrib.frontend_cache",
    "rest_framework",
    "wagtail_headless_preview",
]

MIDDLEWARE = [
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

ROOT_URLCONF = "config.urls"

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")
USE_X_FORWARDED_HOST = strtobool(os.getenv("USE_X_FORWARDED_HOST", "False"))

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "app", "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "wagtail.contrib.settings.context_processors.settings",
                "app.core.context_processors.settings_vars",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

# django-allauth configuration
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_LOGOUT_ON_GET = False  # Bypass logout confirmation form
ACCOUNT_SESSION_REMEMBER = False  # True|False disables "Remember me?" checkbox"

WSGI_APPLICATION = "config.wsgi.application"

# Logging
# https://docs.djangoproject.com/en/3.2/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}

SENTRY_DSN = os.getenv("SENTRY_DSN", "")
ENVIRONMENT_NAME = os.getenv("ENVIRONMENT_NAME", "production")
SENTRY_SAMPLE_RATE = float(os.getenv("SENTRY_SAMPLE_RATE", "0.1"))

# Generated in the CI/CD process
BUILD_VERSION = os.getenv("BUILD_VERSION", "")


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DATABASE_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST"),
        "PORT": os.getenv("DATABASE_PORT", "5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = "wagtail-static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_ROOT = "/media"
MEDIA_URL = "media/"

WAGTAILMEDIA = {
    "MEDIA_MODEL": "media.EtnaMedia",
    "MEDIA_FORM_BASE": "app.media.forms.BaseMediaForm",
    "AUDIO_EXTENSIONS": [
        # "aac",
        # "aiff",
        # "flac",
        # "m4a",
        # "m4b",
        "mp3",
        # "ogg",
        # "wav",
    ],
    "VIDEO_EXTENSIONS": [
        # "avi",
        # "h264",
        # "m4v",
        # "mkv",
        # "mov",
        "mp4",
        # "mpeg",
        # "mpg",
        # "ogv",
        # "webm",
    ],
}

# Wagtail settings

WAGTAIL_SITE_NAME = "The National Archives"

CSRF_TRUSTED_ORIGINS = [
    os.getenv("CSRF_TRUSTED_ORIGINS", "https://www.nationalarchives.gov.uk")
]

# For search results within Wagtail itself
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

WAGTAILDOCS_DOCUMENT_MODEL = "core.CustomDocument"
WAGTAILDOCS_EXTENSIONS = [
    "pdf",
    "xls",
    "xlsx",
    "doc",
    "docx",
    "xls",
    "xlsx",
    "stl",
    "txt",
    "csv",
]
WAGTAILDOCS_INLINE_CONTENT_TYPES = []

WAGTAILIMAGES_IMAGE_MODEL = "images.CustomImage"

# CIIM API Client
ROSETTA_API_URL = os.getenv("ROSETTA_API_URL")

# Rich Text Features
# https://docs.wagtail.io/en/stable/advanced_topics/customisation/page_editing_interface.html#limiting-features-in-a-rich-text-field
INLINE_RICH_TEXT_FEATURES = [
    "bold",
    "italic",
    "link",
]
RESTRICTED_RICH_TEXT_FEATURES = INLINE_RICH_TEXT_FEATURES + [
    "ol",
    "ul",
]
EXPANDED_RICH_TEXT_FEATURES = RESTRICTED_RICH_TEXT_FEATURES + [
    "h2",
    "h3",
]

# Don't anonymise data by default, so we don't accidentally lose production data
BIRDBATH_REQUIRED = False
BIRDBATH_PROCESSORS = ["app.users.anonymisation.UserAnonymiser"]

# -----------------------------------------------------------------------------
# Cache settings
# -----------------------------------------------------------------------------

if redis_url := os.getenv("REDIS_URL"):
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": redis_url,
            "TIMEOUT": int(os.getenv("CACHE_DEFAULT_TIMEOUT", "900")),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
        },
        "renditions": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": redis_url,
            "KEY_PREFIX": "renditions",
        },
    }

RECORD_DETAILS_CACHE_TIMEOUT = int(
    os.getenv("RECORD_DETAILS_CACHE_TIMEOUT", "2592000")  # 30 days
)

WAGTAILFRONTENDCACHE = {
    "cloudfront": {
        "BACKEND": "wagtail.contrib.frontend_cache.backends.CloudfrontBackend",
        "DISTRIBUTION_ID": os.getenv("FRONTEND_CACHE_AWS_DISTRIBUTION_ID", ""),
    },
}

WAGTAILAPI_LIMIT_MAX = int(os.getenv("WAGTAILAPI_LIMIT_MAX", "0")) or None
